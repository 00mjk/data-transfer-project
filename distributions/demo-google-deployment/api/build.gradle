import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

/*
 * Copyright 2018 The Data Transfer Project Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Script to build and dockerize an API server using the Google cloud extension.
 *
 * <p>For now, only supports the local environment. i.e., the container should be run locally and
 * connects to a GCP project which it pulls app secrets from, etc, to test functionality of the
 * Google cloud extension without needing to deploy it to GCP.
 *
 * <p>The next step will be to support deployed environments, and make sure the resulting images
 * work when deployed to GCP.
 *
 * <ul>To run:
 *  <li>./gradlew -PcloudType=google -PgcpProject=<your-project-name> \
 *      :distributions:demo-google-deployment:api:dockerize
 *  <li>docker run --rm -p 8080:8080 -p 5005:5005 dataportability/api
 * </ul>
 */

plugins {
    id 'com.github.johnrengelman.shadow' version '2.0.2'
    id 'com.bmuschko.docker-remote-api' version '3.2.6'
    id 'java'
    id 'application'
}

repositories {
    jcenter()
}

dependencies {
    compile project(':portability-api')
    compile project(':extensions:config:portability-config-yaml')
    // TODO: depend on these based on list in flag values.
    compile project(':extensions:auth:portability-auth-microsoft')
    compile project(':extensions:auth:portability-auth-google')
    compile project(':extensions:auth:portability-auth-flickr')
    compile project(':extensions:auth:portability-auth-rememberthemilk')
    compile project(':extensions:auth:portability-auth-instagram')
}

// TODO: Include index.html in jar

addCloudExtensionDependency(project)

mainClassName = 'org.dataportabilityproject.api.ApiMain'

shadowJar {
    mergeServiceFiles()
    exclude '**/pom.properties'
    exclude '**/pom.xml'
    copy {
        from '../resources/'
        into 'src/main/resources'
    }
}

// Note: This service acct creds file should be used for local testing only. In production, we use
// GOOGLE_APPLICATION_CREDENTIALS which is stored as a Kubernetes secret.
task copyApiServerDeps {
    copy {
        from '../bin/service_acct_creds.json'
        into 'build'
    }
}

task createApiServerDockerfile(type: Dockerfile) {
    description = 'Builds the API Server Dockerfile'
    group = 'docker'
    dependsOn copyApiServerDeps
    destFile project.file("${buildDir}/api/Dockerfile")
    from "gcr.io/google-appengine/openjdk:8"
    exposePort 8080 // Port the API server is accessed from
    copyFile("build/libs/api-all.jar", "/app/api.jar")

    // Note: Debug port, project ID, and service_acct_creds.json set in the image are for local
    // only. This is not secure for an image deployed to production. In production,
    // GOOGLE_APPLICATION_CREDENTIALS is a Kubernetes secret, GOOGLE_PROJECT_ID is set in the
    // Kubernetes deployment (see distributions/common/k8s/api-deployment.yaml).
    exposePort 5005 // Port to open up for the debugger
    defaultCommand("java",
            "-Xdebug",
            "-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005",
            "-jar",
            "/app/api.jar")
    copyFile("build/service_acct_creds.json", '/service_acct_creds.json')
    environmentVariable('GOOGLE_PROJECT_ID', gcpProject)
    environmentVariable('GOOGLE_APPLICATION_CREDENTIALS', '/service_acct_creds.json')

    // TODO: label with git commit
}

task dockerize(type: DockerBuildImage) {
    description = 'Builds the API Server Docker image'
    group = 'docker'
    dependsOn shadowJar, createApiServerDockerfile
    dockerFile = project.file("${buildDir}/api/Dockerfile")
    inputDir = project.file(".")
    tag = 'dataportability/api:latest'
}
